#!/usr/bin/python
__author__ = 'david_allison'

import xml.etree.ElementTree as ET
from watcher.watchpuppy import WatchDogBasedSystem
import time
from watcher.watchedfolder import WatchedFolder
from raven import Client as RavenClient
from watcher.tasks import get_dsn, DSNNotFound
import logging
from watcher.global_settings import CONFIG_FILE,LOGFORMAT,LOGLEVEL,LOGFILE

logging.basicConfig(format=LOGFORMAT,
                    level=LOGLEVEL,
                    filename=LOGFILE)
#This format can be matched in Logstash by: %{PYTIMESTAMP:timestamp}\s*-\s*\[%{DATA:sourcefile}\] %{THREADNAME:thread} %{DATA:function}: %{LOGLEVEL:level} - %{GREEDYDATA:message}
#with custom formats:
#  PYTIMESTAMP %{YEAR}-%{MONTHNUM}-%{MONTHDAY} \s*%{HOUR}:%{MINUTE}:%{SECOND},%{INT}
#  THREADNAME[\w\d\- <>]+

"""
Main Python file that should be called to execute the Watchman system.
Please note that we are loading the XML file with a hardcoded name and path due to tasks.py also needing to access the same file.
"""

folders = {}

#START MAIN

tree = ET.parse(CONFIG_FILE)
root = tree.getroot()


def set_log_level(level):
    level_to_set = logging.getLevelName(level)
    logging.getLogger().setLevel(level_to_set)


try:
    log_level = tree.find('/global/log-level').text
    set_log_level(log_level)
except Exception:
    pass

try:
    raven_client = RavenClient(get_dsn(tree), raise_exception=True)
except DSNNotFound:
    logging.error("No Sentry DSN in the settings file, errors will not be logged to Sentry")
    raven_client = None

for record in tree.findall("path"):
    f=WatchedFolder(record=record, raven_client=raven_client)
    folders[f.location] = f
    logging.info("Setting up watched folder at {0}, stable time is {1}.".format(f.location,f.stable_time))
    logging.debug("Watched folder {0} has ignorelist {1}".format(f.location,f.ignorelist))
    s = WatchDogBasedSystem(location=f.location, poll_delay=f.polltime, stable_time=f.stable_time, ignorelist=f.ignorelist, loglevel=f.loglevel)
    s.daemon = True
    folders[f.location].kennel = s
    s.start()

while True:
    time.sleep(3600)
